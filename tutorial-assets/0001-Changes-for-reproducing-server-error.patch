From 8fd6db53778fb41d98acb6c1e8679ce55f58210f Mon Sep 17 00:00:00 2001
From: Ash-2k3 <ash.me.cse@gmail.com>
Date: Tue, 9 Jul 2024 22:40:28 +0530
Subject: [PATCH] Changes for reproducing server error

---
 .../controllers/contributor_dashboard_test.py |   5 +-
 core/domain/suggestion_services.py            |  39 ++----
 core/domain/suggestion_services_test.py       | 123 +-----------------
 3 files changed, 19 insertions(+), 148 deletions(-)

diff --git a/core/controllers/contributor_dashboard_test.py b/core/controllers/contributor_dashboard_test.py
index a5eaa6167e..caf048670b 100644
--- a/core/controllers/contributor_dashboard_test.py
+++ b/core/controllers/contributor_dashboard_test.py
@@ -2002,13 +2002,12 @@ class ContributorAllStatsSummariesHandlerTest(test_utils.GenericTestBase):
             suggestion_models.SCORE_TYPE_TRANSLATION,
             suggestion_models.SCORE_CATEGORY_DELIMITER))
         change_cmd = {
-            'cmd': 'add_written_translation',
+            'cmd': 'add_translation',
             'content_id': 'content',
             'language_code': 'hi',
             'content_html': '',
             'state_name': 'Introduction',
-            'translation_html': '<p>Translation for content.</p>',
-            'data_format': 'html'
+            'translation_html': '<p>Translation for content.</p>'
         }
         suggestion_models.GeneralSuggestionModel.create(
             feconf.SUGGESTION_TYPE_TRANSLATE_CONTENT,
diff --git a/core/domain/suggestion_services.py b/core/domain/suggestion_services.py
index acf5a68562..449f99fe14 100644
--- a/core/domain/suggestion_services.py
+++ b/core/domain/suggestion_services.py
@@ -4015,34 +4015,21 @@ def _generate_translation_contributor_certificate_data(
     words_count = 0
     for model in suggestions:
         suggestion = get_suggestion_from_model(model)
-        suggestion_change = suggestion.change_cmd
-        data_is_list = (
-            translation_domain.TranslatableContentFormat
-            .is_data_format_list(suggestion_change.data_format)
+        # Retrieve the html content that is emphasized on the
+        # Contributor Dashboard pages. This content is what stands
+        # out for each suggestion when a user views a list of
+        # suggestions.
+        get_html_representing_suggestion = (
+            SUGGESTION_EMPHASIZED_TEXT_GETTER_FUNCTIONS[
+                suggestion.suggestion_type]
         )
-        if (
-                suggestion_change.cmd == 'add_written_translation' and
-                data_is_list
-        ):
-            words_count += sum(
-                len(item.split()) for item in suggestion_change.translation_html
-            )
-        else:
-            # Retrieve the html content that is emphasized on the
-            # Contributor Dashboard pages. This content is what stands
-            # out for each suggestion when a user views a list of
-            # suggestions.
-            get_html_representing_suggestion = (
-                SUGGESTION_EMPHASIZED_TEXT_GETTER_FUNCTIONS[
-                    suggestion.suggestion_type]
-            )
-            plain_text = _get_plain_text_from_html_content_string(
-                get_html_representing_suggestion(suggestion))
+        plain_text = _get_plain_text_from_html_content_string(
+            get_html_representing_suggestion(suggestion))
 
-            words = plain_text.split(' ')
-            words_without_empty_strings = [
-                word for word in words if word != '']
-            words_count += len(words_without_empty_strings)
+        words = plain_text.split(' ')
+        words_without_empty_strings = [
+            word for word in words if word != '']
+        words_count += len(words_without_empty_strings)
     # Go to the below link for more information about how we count hours
     # contributed.# Goto the below link for more information.
     # https://docs.google.com/spreadsheets/d/1ykSNwPLZ5qTCkuO21VLdtm_2SjJ5QJ0z0PlVjjSB4ZQ/edit?usp=sharing
diff --git a/core/domain/suggestion_services_test.py b/core/domain/suggestion_services_test.py
index 04c0cf07da..52f18b2980 100644
--- a/core/domain/suggestion_services_test.py
+++ b/core/domain/suggestion_services_test.py
@@ -7327,76 +7327,18 @@ class ContributorCertificateTests(test_utils.GenericTestBase):
         self.from_date = datetime.datetime.today() - datetime.timedelta(days=1)
         self.to_date = datetime.datetime.today() + datetime.timedelta(days=1)
 
-    def _get_change_with_normalized_string(self) -> Mapping[
-        str, change_domain.AcceptableChangeDictTypes]:
-        """Provides change_cmd dictionary with normalized translation html.
-
-        Returns:
-            Mapping[str, change_domain.AcceptableChangeDictTypes]. A dictionary
-            of the change_cmd object for the translations.
-        """
-        return {
-            'cmd': exp_domain.CMD_ADD_WRITTEN_TRANSLATION,
-            'content_id': 'content_0',
-            'language_code': 'hi',
-            'content_html': '<p>A content to translate.</p>',
-            'state_name': 'Introduction',
-            'translation_html': ['translated text1', 'translated text2'],
-            'data_format': 'set_of_normalized_string'
-        }
-
-    def _calculate_translation_contribution_hours(
-        self, numer_of_words: int
-    ) -> str:
-        """Provides translatoin contribution hours when number of translated
-        words are provided. We calculate the time taken to translate
-        a word according to the following document.
-        https://docs.google.com/spreadsheets/d/1ykSNwPLZ5qTCkuO21VLdtm_2SjJ5QJ0z0PlVjjSB4ZQ/edit#gid=0
-
-        Args:
-            numer_of_words: int. The number of translated words.
-
-        Returns:
-            str. A string that represent the translatoin contribution hours.
-        """
-        return str(round(numer_of_words / 300, 2))
-
-    def _calculate_question_contribution_hours(
-        self, images_included: bool
-    ) -> str:
-        """Provides question contribution hours when number of questions
-        are provided. We calculate the time taken to submit
-        a question according to the following document.
-        https://docs.google.com/spreadsheets/d/1ykSNwPLZ5qTCkuO21VLdtm_2SjJ5QJ0z0PlVjjSB4ZQ/edit#gid=0
-
-        Args:
-            images_included: bool. A flag that says whether the question
-                contains images.
-
-        Returns:
-            str. A string that represent the question contribution hours.
-        """
-        minutes_contributed = 0
-
-        if images_included:
-            minutes_contributed += 20
-        else:
-            minutes_contributed += 12
-        return str(round(minutes_contributed / 60, 2))
-
     def test_create_translation_contributor_certificate(self) -> None:
         score_category: str = ('%s%sEnglish' % (
             suggestion_models.SCORE_TYPE_TRANSLATION,
             suggestion_models.SCORE_CATEGORY_DELIMITER)
         )
         change_cmd = {
-            'cmd': exp_domain.CMD_ADD_WRITTEN_TRANSLATION,
+            'cmd': 'add_translation',
             'content_id': 'content',
             'language_code': 'hi',
             'content_html': '',
             'state_name': 'Introduction',
-            'translation_html': '<p>Translation for content.</p>',
-            'data_format': 'html'
+            'translation_html': '<p>Translation for content.</p>'
         }
         suggestion_models.GeneralSuggestionModel.create(
             feconf.SUGGESTION_TYPE_TRANSLATE_CONTENT,
@@ -7417,46 +7359,6 @@ class ContributorCertificateTests(test_utils.GenericTestBase):
         # Ruling out the possibility of None for mypy type checking.
         assert certificate_data is not None
 
-        self.assertEqual(
-            certificate_data['contribution_hours'],
-            self._calculate_translation_contribution_hours(3)
-        )
-        self.assertEqual(certificate_data['language'], 'Hindi')
-
-    def test_create_translation_contributor_certificate_for_rule_translation(
-        self
-    ) -> None:
-        score_category: str = '%s%sEnglish' % (
-            suggestion_models.SCORE_TYPE_TRANSLATION,
-            suggestion_models.SCORE_CATEGORY_DELIMITER
-        )
-
-        change_cmd = self._get_change_with_normalized_string()
-        suggestion_models.GeneralSuggestionModel.create(
-            feconf.SUGGESTION_TYPE_TRANSLATE_CONTENT,
-            feconf.ENTITY_TYPE_EXPLORATION,
-            'exp1', 1, suggestion_models.STATUS_ACCEPTED, self.author_id,
-            'reviewer_1', change_cmd, score_category,
-            'exploration.exp1.thread_6', 'hi')
-
-        certificate_data = (
-            suggestion_services.generate_contributor_certificate_data(
-                self.username,
-                feconf.SUGGESTION_TYPE_TRANSLATE_CONTENT,
-                'hi',
-                self.from_date,
-                self.to_date,
-            ))
-
-        # Ruling out the possibility of None for mypy type checking.
-        assert certificate_data is not None
-
-        self.assertEqual(
-            certificate_data['contribution_hours'],
-            self._calculate_translation_contribution_hours(4)
-        )
-        self.assertEqual(certificate_data['language'], 'Hindi')
-
     def test_create_translation_contributor_certificate_for_english(
         self
     ) -> None:
@@ -7466,13 +7368,12 @@ class ContributorCertificateTests(test_utils.GenericTestBase):
         )
 
         change_cmd = {
-            'cmd': exp_domain.CMD_ADD_WRITTEN_TRANSLATION,
+            'cmd': 'add_translation',
             'content_id': 'content',
             'language_code': 'en',
             'content_html': '',
             'state_name': 'Introduction',
-            'translation_html': '<p>Translation for content.</p>',
-            'data_format': 'html'
+            'translation_html': '<p>Translation for content.</p>'
         }
         suggestion_models.GeneralSuggestionModel.create(
             feconf.SUGGESTION_TYPE_TRANSLATE_CONTENT,
@@ -7493,12 +7394,6 @@ class ContributorCertificateTests(test_utils.GenericTestBase):
         # Ruling out the possibility of None for mypy type checking.
         assert certificate_data is not None
 
-        self.assertEqual(
-            certificate_data['contribution_hours'],
-            self._calculate_translation_contribution_hours(3)
-        )
-        self.assertEqual(certificate_data['language'], 'English')
-
     def test_create_question_contributor_certificate(self) -> None:
         content_id_generator = translation_domain.ContentIdGenerator()
         suggestion_change: Dict[
@@ -7551,11 +7446,6 @@ class ContributorCertificateTests(test_utils.GenericTestBase):
         # Ruling out the possibility of None for mypy type checking.
         assert certificate_data is not None
 
-        self.assertEqual(
-            certificate_data['contribution_hours'],
-            self._calculate_question_contribution_hours(False)
-        )
-
     def test_create_question_contributor_certificate_with_image_content(
         self
     ) -> None:
@@ -7611,11 +7501,6 @@ class ContributorCertificateTests(test_utils.GenericTestBase):
         # Ruling out the possibility of None for mypy type checking.
         assert certificate_data is not None
 
-        self.assertEqual(
-            certificate_data['contribution_hours'],
-            self._calculate_question_contribution_hours(True)
-        )
-
     def test_create_certificate_returns_none_for_no_translation_suggestions(
         self
     ) -> None:
-- 
2.44.0

